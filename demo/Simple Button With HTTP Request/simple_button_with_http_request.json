{
  "alias": "simple_button_with_http_request",
  "name": "Simple Button With HTTP Request",
  "descriptor": {
    "type": "latest",
    "sizeX": 4.5,
    "sizeY": 4,
    "resources": [],
    "templateHtml": "<fieldset class=\"widget-box\" id=\"wrapper\">\n\n    <div class=\"actions-form-box\">\n        <button \n            mat-stroked-button \n            color=\"primary\" \n            class=\"go-btn\"\n            (click)=\"goButtonHandler()\"\n        >Go !</button>\n        \n    </div>\n    \n    <div class=\"result-box\">\n        {{ joke?.value }}\n        <div class=\"date\">{{ joke?.created_at }}</div>\n        \n    </div>\n\n</fieldset>\n\n<mat-progress-bar\n    [fxShow]=\"isLoading\"\n    style=\"position: absolute; bottom: 0\"\n    mode=\"indeterminate\"\n></mat-progress-bar>",
    "templateCss": ".widget-box {\n    padding: 5px;\n}\n\nbutton {\n    width: 100%;\n}\n\n.result-box {\n    font-size: 18px;\n    padding: 30px 5px;\n}\n\n    .result-box .date {\n        text-align: right;\n        font-size: 10px;\n        margin-top: 30px;\n        font-style: italic;\n    }",
    "controllerScript": "var namespace,\n    cssParser = new cssjs(),\n    $injector,\n    servicesMap,\n    utils,\n    http;\n\n\n\nself.onInit = function () {\n    ctx = self.ctx;\n    $injector = ctx.$scope.$injector;\n    servicesMap = ctx.servicesMap;\n    \n    utils = self.ctx.$injector.get(ctx.servicesMap.get(\"utils\"));\n    http = $injector.get(ctx.servicesMap.get(\"http\"));\n    \n    ctx.widgetTitle = \"Simple Button With HTTP Request\";\n    \n    namespace = \"dnk-widget-\" + utils.guid();\n    cssParser.testMode = false;\n    cssParser.cssPreviewNamespace = namespace;\n    ctx.$container.addClass(namespace);\n    \n    ctx.ngZone.run(function () {\n        init();\n    });\n    \n    ctx.updateWidgetParams();\n};\n\n\nfunction init() {\n    var scope = self.ctx.$scope;\n    var settings = self.ctx.settings;\n\n\n/* -------------------------------------------------------------------------\n    UI functions\n------------------------------------------------------------------------- */\n\n    scope.isLoading = false;\n    scope.joke = {};\n    \n    \n    scope.goButtonHandler = ($event) => {\n        scope.isLoading = true;\n        makeHTTPRequest();\n    };\n    \n    const populateUI = (data) => {\n        scope.isLoading = false;\n        scope.joke = data;\n        \n        self.ctx.detectChanges();\n    }\n  \n  \n/* -------------------------------------------------------------------------\n    HTTP functions\n------------------------------------------------------------------------- */\n\n    makeHTTPRequest = () => {\n        \n        let url = \"https://api.chucknorris.io/jokes/random\";\n        \n        http.get(url).subscribe((res) => {\n            console.log(\"Woot :)\", res);\n            populateUI(res)\n        }, (res) => {\n            console.log(\"Oups :(\", res);\n            populateUI({})\n        });\n    \n    }\n\n\n  \n\n    self.onResize();\n} // Init function end\n\nself.onResize = function () {};\n\nself.onDestroy = function () {};\n",
    "settingsSchema": "{\n    \"schema\": {\n    },\n    \"form\": []\n}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Simple Button With HTTP Request\",\"targetDeviceAliasIds\":[\"909cc7e6-5573-0474-791d-02a731c665f9\"],\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2019955902905617,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
  }
}